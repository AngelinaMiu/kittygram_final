name: Main kittygram_final workflow

on:
  push:
    branches:
      - main

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8==6.0.0 flake8-isort==6.0.0
          pip install -r ./backend/requirements.txt

      - name: Lint code
        run: |
          flake8 backend/ --max-line-length=79

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: mydatabase
          POSTGRES_USER: angel
          POSTGRES_PASSWORD: 3357
          POSTGRES_HOST: localhost
          
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U $POSTGRES_USER"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
        volumes:
          - postgres_data:/var/lib/postgresql/data
    env:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: angel
      POSTGRES_PASSWORD: 3357
      POSTGRES_HOST: localhost
      DJANGO_SECRET_KEY: sk9qxw2n1p6b&$5bkh63^h(_02*c3&(c8#7s(3u4xk-j!g_s8
      ALLOWED_HOSTS: 127.0.0.1 localhost
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: Install dependencies for backend
        run: |
          cd backend
          pip install --upgrade pip
          pip install -r requirements.txt
          python manage.py migrate
          python manage.py collectstatic --noinput

      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Install dependencies for frontend
        run: |
          cd frontend
          npm install

      - name: Run frontend tests
        run: |
          cd frontend
          npm test

  build_and_push:
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Build and push backend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend ./backend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_backend

      - name: Build and push frontend image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend ./frontend
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_frontend

      - name: Build and push gateway image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway ./nginx
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/kittygram_gateway

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 51.250.105.252 >> ~/.ssh/known_hosts

      - name: Create .env file on the server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no yc-user@51.250.105.252 << EOF
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" > /home/yc-user/kittygram_final/.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> /home/yc-user/kittygram_final/.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> /home/yc-user/kittygram_final/.env
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> /home/yc-user/kittygram_final/.env
          echo "POSTGRES_PORT=${{ secrets.POSTGRES_PORT }}" >> /home/yc-user/kittygram_final/.env
          echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" >> /home/yc-user/kittygram_final/.env
          echo "DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}" >> /home/yc-user/kittygram_final/.env
          echo "DJANGO_ALLOWED_HOSTS=${{ secrets.DJANGO_ALLOWED_HOSTS }}" >> /home/yc-user/kittygram_final/.env
          EOF

      - name: Deploy to server
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no yc-user@51.250.105.252 'cd /home/yc-user/kittygram_final && export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }} && sudo docker-compose -f docker-compose.production.yml pull && sudo docker-compose -f docker-compose.production.yml down && sudo docker-compose -f docker-compose.production.yml up --build -d'

      - name: Run database migrations and collect static files
        run: |
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no yc-user@51.250.105.252 'cd /home/yc-user/kittygram_final && sudo docker-compose exec backend python manage.py migrate'
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no yc-user@51.250.105.252 'cd /home/yc-user/kittygram_final && sudo docker-compose exec backend python manage.py collectstatic --noinput'
      # Извещать вас в Telegram об успешном завершении деплоя
      - name: Notify on Telegram
        run: |
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d chat_id=${{ secrets.TELEGRAM_CHAT_ID }} \
            -d text="Kittygram deployment completed successfully"
